Result for running Unit tests:
unittest1.c:
TESTING: Function getFullCount()
Testing if function returns correct int
TEST PASSED
Testing for correct count in deck pile
TEST PASSED
Testing for correct count in hand pile
TEST PASSED
Testing for correct count in discard pile
TEST PASSED
unittest2.c:
TESTING: Function numHandCards()
Number of carsd in P1's hand at start: 2
Number of cards in P2's hand at start: 2
Number of cards in P1's hand after addition: 3
Number of cards in P2's hand after addition: 3
P1 TEST PASSED
P2 TEST PASSED
Number of cards in P1's hand after subration: 2
Number of cards in P2's hand after subtraction: 2
P1 TEST PASSED
P2 TEST PASSED
unittest3.c:
TESTING: function whoseTurn()
TEST PASSED
unittest4.c:
TESTING: Function gainCard()
Testing if function will return -1 when supply count is 0
TEST PASSED
Testing if the discard count has increased by 1
TEST PASSED
Testing if the card is found within the discard deck
TEST PASSED
Testing if deck count has increased by 1
TEST PASSED
Testing that card is within deck
TEST PASSED
Testing if hand count has increased by 1
TEST PASSED
Testing that card is in the hand
TEST PASSED
Testing if the supply count of card decreases
TEST PASSED
Testing for behavoir when a bad flag value is passed
TEST FAILED
cardtest1.c:
TESTING: card SMITHY
i = 0
i = 1
i = 2
i = 3
smithyPlay Value = 0
Testing Current player has 2 addtional cards after discard
Current player hand count before smithy is: 5
Current player hand count after smithy is: 8
TEST FAILED
Testing Player 2 has same amount of cards
Player 2 hand count before smithy is: 0
Player 2 hand count after smithy is: 0
TEST PASSED
Testing for current players +3 cards came from own deck
Number of cards in deck before smithy is: 5
Number of cards in deck after smithy is: 0
TEST FAILED
TESTING: Victory cards have not changed
estate before: 8 estate after: 6
dutchy before: 8 dutchy after: 8
province before: 8 province afer: 8
TEST FAILED
Testing for no change in kindom card supply
TEST PASSED
cardtest2.c:
Testing card: ADVENTURER
numTreasure = 4
card draw: 4
card draw: 4
Testing for two additional treasure cards in hand
number of treasure cards total: 6
number of cards discarded 0
TEST PASSED
Testing for number of cards in hand
handCountBefore = 5
handCountAfter = 9
TEST FAILED
TESTING: Victory cards have not changed
estate before: 8 estate after: 8
dutchy before: 8 dutchy after: 8
province before: 8 province afer: 8
TEST PASSED
Testing for no change in kindom card supply
TEST PASSED
Testing behavior when deck is empty
card draw: -1
card draw: 1
card draw: 4
card draw: 4
number of cards in hand before smithy is called: 9
number of cards in hand after deck is empty: 9
TEST FAILED
TESTING: card VILLAGE
Testing for additional card in hand
Number of cards in hand before call 5
Number of cards in hand after call 5
TEST PASSED
Testing for additional actions
TEST PASSED
Checking for player 2's hand to be unchanged
TEST PASSED
Testing for victory cards to be unchanged
estate before: 8 estate after: 6
dutchy before: 8 dutchy after: 8
province before: 8 province afer: 8
TEST FAILED
Testing for Village card in played cards deck
TEST FAILED
Testing for no change in kindom card supply
TEST PASSED
cardtest4.c:
TESTING: card COUNCIL_ROOM
Testing if player one has +4 cards
Number of cards in hand before play: 5
Number of cards in hand after play: 9
TEST FAILED
Testing if there is +1 buy
TEST PASSED
Testing if other players each have an additional card in hand
TEST PASSED
Testing for Victory Cards to be unchanged
TEST PASSED
Testing for no change in kindom card supply
TEST PASSED
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:16.43% of 207
Branches executed:21.79% of 179
Taken at least once:9.50% of 179
Calls executed:20.69% of 58

Function 'councilRoomEffect'
Lines executed:100.00% of 9
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 3

Function 'greatHallEffect'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurerEffect'
Lines executed:100.00% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
Calls executed:100.00% of 2

Function 'smithyEffect'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'getCost'
Lines executed:10.00% of 30
Branches executed:100.00% of 28
Taken at least once:3.57% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:100.00% of 2
No branches
Calls executed:100.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 21
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 10

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:93.55% of 62
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:39.12% of 565
Branches executed:43.34% of 413
Taken at least once:28.57% of 413
Calls executed:31.07% of 103
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://test comment by harranne 
        -:    9://test
        -:   10:
function compare called 301 returned 100% blocks executed 100%
      301:   11:int compare(const void* a, const void* b) {
      301:   12:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   13:    return 1;
      300:   14:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   15:    return -1;
      220:   16:  return 0;
        -:   17:}
        -:   18:
function newGame called 0 returned 0% blocks executed 0%
    #####:   19:struct gameState* newGame() {
    #####:   20:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   21:  return g;
        -:   22:}
        -:   23:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   24:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   25:		  int k8, int k9, int k10) {
    #####:   26:  int* k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:		   struct gameState *state) {
        -:   42:
        -:   43:  int i;
        -:   44:  int j;
        -:   45:  int it;			
        -:   46:  //set up random number generator
        8:   47:  SelectStream(1);
call    0 returned 100%
        8:   48:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   49:  
        -:   50:  //check number of players
        8:   51:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   52:    {
    #####:   53:      return -1;
        -:   54:    }
        -:   55:
        -:   56:  //set number of players
        8:   57:  state->numPlayers = numPlayers;
        -:   58:
        -:   59:  //check selected kingdom cards are different
       88:   60:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   61:    {
      880:   62:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   63:        {
      800:   64:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   65:	    {
    #####:   66:	      return -1;
        -:   67:	    }
        -:   68:        }
        -:   69:    }
        -:   70:
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        8:   76:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   77:    {
        6:   78:      state->supplyCount[curse] = 10;
        -:   79:    }
        2:   80:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 20;
        -:   83:    }
        -:   84:  else
        -:   85:    {
        2:   86:      state->supplyCount[curse] = 30;
        -:   87:    }
        -:   88:
        -:   89:  //set number of Victory cards
        8:   90:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   91:    {
        6:   92:      state->supplyCount[estate] = 8;
        6:   93:      state->supplyCount[duchy] = 8;
        6:   94:      state->supplyCount[province] = 8;
        -:   95:    }
        -:   96:  else
        -:   97:    {
        2:   98:      state->supplyCount[estate] = 12;
        2:   99:      state->supplyCount[duchy] = 12;
        2:  100:      state->supplyCount[province] = 12;
        -:  101:    }
        -:  102:
        -:  103:  //set number of Treasure cards
        8:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  105:  state->supplyCount[silver] = 40;
        8:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
      168:  109:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:    {
     1320:  111:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:	{
     1240:  113:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:	    {
        -:  115:	      //check if card is a 'Victory' Kingdom card
       80:  116:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  117:		{
       32:  118:		  if (numPlayers == 2){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       12:  119:		    state->supplyCount[i] = 8; 
        -:  120:		  }
        4:  121:		  else{ state->supplyCount[i] = 12; }
        -:  122:		}
        -:  123:	      else
        -:  124:		{
       64:  125:		  state->supplyCount[i] = 10;
        -:  126:		}
       80:  127:	      break;
        -:  128:	    }
        -:  129:	  else    //card is not in the set choosen for the game
        -:  130:	    {
     1160:  131:	      state->supplyCount[i] = -1;
        -:  132:	    }
        -:  133:	}
        -:  134:
        -:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
       28:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  142:    {
       20:  143:      state->deckCount[i] = 0;
       80:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  145:	{
       60:  146:	  state->deck[i][j] = estate;
       60:  147:	  state->deckCount[i]++;
        -:  148:	}
      160:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  150:	{
      140:  151:	  state->deck[i][j] = copper;
      140:  152:	  state->deckCount[i]++;		
        -:  153:	}
        -:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
       28:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  158:    {
       20:  159:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        -:  163:    }
        -:  164:
        -:  165:  //draw player hands
       28:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  167:    {  
        -:  168:      //initialize hand size to zero
       20:  169:      state->handCount[i] = 0;
       20:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        -:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
      224:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  180:    {
      216:  181:      state->embargoTokens[i] = 0;
        -:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        8:  185:  state->outpostPlayed = 0;
        8:  186:  state->phase = 0;
        8:  187:  state->numActions = 1;
        8:  188:  state->numBuys = 1;
        8:  189:  state->playedCardCount = 0;
        8:  190:  state->whoseTurn = 0;
        8:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       48:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  196:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  197:  }
        -:  198:
        8:  199:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  200:
        8:  201:  return 0;
        -:  202:}
        -:  203:
function shuffle called 30 returned 100% blocks executed 100%
       30:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
       30:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
       30:  212:  if (state->deckCount[player] < 1)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:  213:    return -1;
       22:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
      247:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      203:  218:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      203:  219:    newDeck[newDeckPos] = state->deck[player][card];
      203:  220:    newDeckPos++;
      702:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      499:  222:      state->deck[player][i] = state->deck[player][i+1];
        -:  223:    }
      203:  224:    state->deckCount[player]--;
        -:  225:  }
      225:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      203:  227:    state->deck[player][i] = newDeck[i];
      203:  228:    state->deckCount[player]++;
        -:  229:  }
        -:  230:
       22:  231:  return 0;
        -:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
    #####:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:	  printf("failed at state->phase check\n");
call    0 never executed
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
    #####:  247:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  248:    {
    #####:  249:	  printf("failed at state->numActions check\n");
call    0 never executed
    #####:  250:      return -1;
        -:  251:    }
        -:  252:	
        -:  253:  //get card played
    #####:  254:  card = handCard(handPos, state);
call    0 never executed
    #####:  255:  printf("card returned = %d\n", card);
call    0 never executed
    #####:  256:  printf("adventurer = %d\n", adventurer);
call    0 never executed
    #####:  257:  printf("treatsure_map = %d\n", treasure_map);
call    0 never executed
        -:  258:	
        -:  259:  //check if selected card is an action
    #####:  260:  if ( card < adventurer || card > treasure_map ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  261:	  printf("failed at 'selected card is an action' check\n");
call    0 never executed
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //play card
    #####:  266:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  267:    {
    #####:  268:	  printf("failed at cardEffect call\n");
call    0 never executed
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:	
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  282:int buyCard(int supplyPos, struct gameState *state) {
        -:  283:  int who;
        -:  284:  if (DEBUG){
        -:  285:    printf("Entering buyCard...\n");
        -:  286:  }
        -:  287:
        -:  288:  // I don't know what to do about the phase thing.
        -:  289:
    #####:  290:  who = state->whoseTurn;
        -:  291:
    #####:  292:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("You do not have any buys left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG)
        -:  298:      printf("There are not any of that type of card left\n");
    #####:  299:    return -1;
    #####:  300:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  301:    if (DEBUG) 
        -:  302:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  303:    return -1;
        -:  304:  } else {
    #####:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
    #####:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  308:  
    #####:  309:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  310:    state->numBuys--;
        -:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:    
    #####:  318:  return 0;
        -:  319:}
        -:  320:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  321:int numHandCards(struct gameState *state) {
        4:  322:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  323:}
        -:  324:
function handCard called 0 returned 0% blocks executed 0%
    #####:  325:int handCard(int handPos, struct gameState *state) {
    #####:  326:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
function supplyCount called 33 returned 100% blocks executed 100%
       33:  330:int supplyCount(int card, struct gameState *state) {
       33:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
function fullDeckCount called 1 returned 100% blocks executed 100%
        1:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
        1:  336:  int count = 0;
        -:  337:
        7:  338:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  339:    {
        6:  340:      if (state->deck[player][i] == card) count++;
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  341:    }
        -:  342:
        7:  343:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  344:    {
        6:  345:      if (state->hand[player][i] == card) count++;
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  346:    }
        -:  347:
        2:  348:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  349:    {
        1:  350:      if (state->discard[player][i] == card) count++;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  351:    }
        -:  352:
        1:  353:  return count;
        -:  354:}
        -:  355:
function whoseTurn called 13 returned 100% blocks executed 100%
       13:  356:int whoseTurn(struct gameState *state) {
       13:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
    #####:  363:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  364:  
        -:  365:  //Discard hand
    #####:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
    #####:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:    
        -:  372:  //Code for determining the player
    #####:  373:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
    #####:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
    #####:  380:  state->outpostPlayed = 0;
    #####:  381:  state->phase = 0;
    #####:  382:  state->numActions = 1;
    #####:  383:  state->coins = 0;
    #####:  384:  state->numBuys = 1;
    #####:  385:  state->playedCardCount = 0;
    #####:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    #####:  390:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  391:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  392:  }
        -:  393:
        -:  394:  //Update money
    #####:  395:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  396:
    #####:  397:  return 0;
        -:  398:}
        -:  399:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:	
        -:  404:  //if stack of Province cards is empty, the game ends
    #####:  405:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
    #####:  411:  j = 0;
    #####:  412:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  415:	{
    #####:  416:	  j++;
        -:  417:	}
        -:  418:    }
    #####:  419:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
    #####:  424:  return 0;
        -:  425:}
        -:  426:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
    #####:  430:  int score = 0;
        -:  431:  //score from hand
    #####:  432:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
    #####:  454:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  455:    {
    #####:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  462:    }
        -:  463:
    #####:  464:  return score;
        -:  465:}
        -:  466:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;	
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
    #####:  474:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  475:    {
        -:  476:      //set unused player scores to -9999
    #####:  477:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  478:	{
    #####:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
    #####:  483:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
    #####:  488:  j = 0;
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  492:	{
    #####:  493:	  j = i;
        -:  494:	}
        -:  495:    }
    #####:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
    #####:  499:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  503:	{
    #####:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
    #####:  509:  j = 0;
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  j = i;
        -:  515:	}
        -:  516:    }
    #####:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
    #####:  520:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  523:	{
    #####:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
    #####:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
    #####:  532:  return 0;
        -:  533:}
        -:  534:
function drawCard called 71 returned 100% blocks executed 100%
       71:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
       71:  538:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
       13:  543:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 23%
branch  1 taken 77% (fallthrough)
        3:  544:      state->deck[player][i] = state->discard[player][i];
        3:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
       10:  548:    state->deckCount[player] = state->discardCount[player];
       10:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
       10:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
       10:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
       10:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
       10:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
       10:  569:    if (deckCounter == 0)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        8:  570:      return -1;
        -:  571:
        2:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  573:    state->deckCount[player]--;
        2:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
       61:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
       61:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
       61:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       61:  586:    state->deckCount[player]--;
       61:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
       63:  590:  return 0;
        -:  591:}
        -:  592:
function getCost called 3 returned 100% blocks executed 10%
        3:  593:int getCost(int cardNumber)
        -:  594:{
        3:  595:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 100%
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
    #####:  602:      return 5;
        -:  603:    case province:
    #####:  604:      return 8;
        -:  605:    case copper:
    #####:  606:      return 0;
        -:  607:    case silver:
    #####:  608:      return 3;
        -:  609:    case gold:
    #####:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
    #####:  614:      return 5;
        -:  615:    case feast:
    #####:  616:      return 4;
        -:  617:    case gardens:
    #####:  618:      return 4;
        -:  619:    case mine:
    #####:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
    #####:  624:      return 4;
        -:  625:    case village:
    #####:  626:      return 3;
        -:  627:    case baron:
    #####:  628:      return 4;
        -:  629:    case great_hall:
    #####:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo: 
    #####:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:	
        3:  653:  return -1;
        -:  654:}
        -:  655:
        -:  656:/*************************************************************************
        -:  657: REFACTORING SECTION
        -:  658:**************************************************************************/
        -:  659:
        -:  660://Refactoring Smithy
function smithyEffect called 1 returned 100% blocks executed 100%
        1:  661:int smithyEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  662:	//printf("in smithyEffect\n");
        -:  663:	int i;
        -:  664:	//BUG 
        -:  665:	// original statement: for(i=0; i < 3; i++)
        -:  666:	// bug intorudced: changed i < 3 to i <= 3
        -:  667:	// the bug will allow to draw one extra card
        5:  668:	for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:  669:		printf("i = %d\n", i);
call    0 returned 100%
        4:  670:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  671:	}
        -:  672:
        -:  673:	//discard card from hand
        1:  674:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  675:	return 0;
        -:  676:}
        -:  677:
        -:  678://Refactoring Adventurer
function adventurerEffect called 2 returned 100% blocks executed 100%
        2:  679:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int z) {
        -:  680:	int cardDrawn;
       10:  681:	while (drawntreasure < 2) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  682:		//BUG
        -:  683:		//commenting out the section where we check to see if we need to shuffle the deck
        -:  684:		/*
        -:  685:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
        -:  686:			shuffle(currentPlayer, state);
        -:  687:		}
        -:  688:		*/
        6:  689:		drawCard(currentPlayer, state);
call    0 returned 100%
        6:  690:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        6:  691:		printf("card draw: %d\n", cardDrawn);
call    0 returned 100%
        6:  692:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:  693:			drawntreasure++;
        -:  694:		else {
        2:  695:			temphand[z] = cardDrawn;
        -:  696:			//printf("temphand[z] = %d\n", temphand[z]);
        2:  697:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  698:			z++;
        -:  699:		}
        -:  700:	}
        6:  701:	while (z - 1 >= 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2:  702:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        2:  703:		z = z - 1;
        -:  704:	}
        2:  705:	return 0;
        -:  706:}
        -:  707:
        -:  708://refactoring village 
function villageEffect called 2 returned 100% blocks executed 100%
        2:  709:int villageEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  710:	//+1 Card
        2:  711:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  712:
        -:  713:	//+2 Actions
        2:  714:	state->numActions = state->numActions + 2;
        -:  715:
        -:  716:	//discard played card from hand
        -:  717:	//BUG INSERTED HERE
        -:  718:	//changed the final parameter of discardCard from 0 to 1
        -:  719:	//discardCard(handPos, currentPlayer, state, 0);
        2:  720:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        2:  721:	return 0;
        -:  722:}
        -:  723:
        -:  724://refactoring great hall
function greatHallEffect called 0 returned 0% blocks executed 0%
    #####:  725:int greatHallEffect(int currentPlayer, struct gameState *state, int handPos) {
        -:  726:	//+1 Card
    #####:  727:	drawCard(currentPlayer, state);
call    0 never executed
        -:  728:
        -:  729:	//+1 Actions
    #####:  730:	state->numActions++;
        -:  731:
        -:  732:	//discard card from hand
    #####:  733:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  734:	return 0;
        -:  735:}
        -:  736:
        -:  737://refacotring council_room
function councilRoomEffect called 3 returned 100% blocks executed 100%
        3:  738:int councilRoomEffect(int currentPlayer, struct gameState *state, int handPos) {
        3:  739:	int i = 0;
        -:  740:	//+4 Cards
       15:  741:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  742:	{
       12:  743:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  744:	}
        -:  745:
        -:  746:	//+1 Buy
        3:  747:	state->numBuys++;
        -:  748:
        -:  749:	//Each other player draws a card
       10:  750:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  751:	{
        -:  752:		//printf("drawing card for %d\n", i);
        -:  753:		//BUG
        -:  754:		//Removing if statement that checks for the current player
        -:  755:		//This will allow the current player to also draw an additional card which
        -:  756:		//is incorrect behavior for this card
        -:  757:		//if (i != currentPlayer)
        -:  758:		//{
        7:  759:			drawCard(i, state);
call    0 returned 100%
        -:  760:		//}
        -:  761:	}
        -:  762:
        -:  763:	//put played card in played card pile
        3:  764:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  765:
        3:  766:	return 0;
        -:  767:}
        -:  768:
function cardEffect called 5 returned 100% blocks executed 14%
        5:  769:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  770:{
        -:  771:	//printf("in cardEffect\n card is int %d\n", card);
        -:  772:  int i;
        -:  773:  int j;
        -:  774:  int k;
        -:  775:  int x;
        -:  776:  int index;
        5:  777:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  778:  int nextPlayer = currentPlayer + 1;
        -:  779:
        5:  780:  int tributeRevealedCards[2] = {-1, -1};
        -:  781:  int temphand[MAX_HAND];// moved above the if statement
        5:  782:  int drawntreasure=0;
        -:  783:  //variable cardDrawn not needed as it will be initialized in the adventurerEffect function
        -:  784:  //int cardDrawn;
        -:  785:  //variable z not needed as it will be initialized in the adventurerEffect function
        5:  786:  int z = 0;// this is the counter for the temp hand
        5:  787:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:  788:    nextPlayer = 0;
        -:  789:  }
        -:  790:  
        -:  791:	
        -:  792:  //uses switch to select card and perform actions
        5:  793:  switch( card ) 
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 20%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  794:    {
        -:  795:    case adventurer:
        -:  796:		//refactored
        2:  797:		adventurerEffect(drawntreasure, state, currentPlayer, temphand, z);
call    0 returned 100%
        -:  798:		/*
        -:  799:      while(drawntreasure<2){
        -:  800:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  801:	  shuffle(currentPlayer, state);
        -:  802:	}
        -:  803:	drawCard(currentPlayer, state);
        -:  804:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  805:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  806:	  drawntreasure++;
        -:  807:	else{
        -:  808:	  temphand[z]=cardDrawn;
        -:  809:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  810:	  z++;
        -:  811:	}
        -:  812:      }
        -:  813:      while(z-1>=0){
        -:  814:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  815:	z=z-1;
        -:  816:      }
        -:  817:      return 0;
        -:  818:	*/
        -:  819:
        -:  820:    case council_room:
        3:  821:		councilRoomEffect(currentPlayer, state, handPos);
call    0 returned 100%
        -:  822:		/*
        -:  823:      //+4 Cards
        -:  824:      for (i = 0; i < 4; i++)
        -:  825:	{
        -:  826:	  drawCard(currentPlayer, state);
        -:  827:	}
        -:  828:			
        -:  829:      //+1 Buy
        -:  830:      state->numBuys++;
        -:  831:			
        -:  832:      //Each other player draws a card
        -:  833:      for (i = 0; i < state->numPlayers; i++)
        -:  834:	{
        -:  835:	  if ( i != currentPlayer )
        -:  836:	    {
        -:  837:	      drawCard(i, state);
        -:  838:	    }
        -:  839:	}
        -:  840:			
        -:  841:      //put played card in played card pile
        -:  842:      discardCard(handPos, currentPlayer, state, 0);
        -:  843:			
        -:  844:      return 0;
        -:  845:			*/
        -:  846:
        -:  847:    case feast:
        -:  848:      //gain card with cost up to 5
        -:  849:      //Backup hand
       33:  850:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       30:  851:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       30:  852:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  853:      }
        -:  854:      //Backup hand
        -:  855:
        -:  856:      //Update Coins for Buy
        3:  857:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        3:  858:      x = 1;//Condition to loop on
        9:  859:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        3:  860:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  861:	  if (DEBUG)
        -:  862:	    printf("None of that card left, sorry!\n");
        -:  863:
        -:  864:	  if (DEBUG){
        -:  865:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  866:	  }
        -:  867:	}
        3:  868:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  869:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  870:
        -:  871:	  if (DEBUG){
        -:  872:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  873:	  }
        -:  874:	}
        -:  875:	else{
        -:  876:
        -:  877:	  if (DEBUG){
        -:  878:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  879:	  }
        -:  880:
        3:  881:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        3:  882:	  x = 0;//No more buying cards
        -:  883:
        -:  884:	  if (DEBUG){
        -:  885:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  886:	  }
        -:  887:
        -:  888:	}
        -:  889:      }     
        -:  890:
        -:  891:      //Reset Hand
       33:  892:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       30:  893:	state->hand[currentPlayer][i] = temphand[i];
       30:  894:	temphand[i] = -1;
        -:  895:      }
        -:  896:      //Reset Hand
        -:  897:      			
        3:  898:      return 0;
        -:  899:			
        -:  900:    case gardens:
    #####:  901:      return -1;
        -:  902:			
        -:  903:    case mine:
    #####:  904:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:		
    #####:  911:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  912:	{
    #####:  913:	  return -1;
        -:  914:	}
        -:  915:
    #####:  916:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  917:	{
    #####:  918:	  return -1;
        -:  919:	}
        -:  920:
    #####:  921:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  922:
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  925:
        -:  926:      //discard trashed card
    #####:  927:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	{
    #####:  929:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  930:	    {
    #####:  931:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  932:	      break;
        -:  933:	    }
        -:  934:	}
        -:  935:			
    #####:  936:      return 0;
        -:  937:			
        -:  938:    case remodel:
    #####:  939:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  940:
    #####:  941:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  942:	{
    #####:  943:	  return -1;
        -:  944:	}
        -:  945:
    #####:  946:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  947:
        -:  948:      //discard card from hand
    #####:  949:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  950:
        -:  951:      //discard trashed card
    #####:  952:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  953:	{
    #####:  954:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  955:	    {
    #####:  956:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  957:	      break;
        -:  958:	    }
        -:  959:	}
        -:  960:
        -:  961:
    #####:  962:      return 0;
        -:  963:		
        -:  964:	  //refactored
        -:  965:	case smithy:
        -:  966:		//printf("in case smithy:\n");
        1:  967:		smithyEffect(state, currentPlayer, handPos);
call    0 returned 100%
        -:  968:
        -:  969:      //+3 Cards
        -:  970:      /*for (i = 0; i < 3; i++)
        -:  971:	{
        -:  972:	  drawCard(currentPlayer, state);
        -:  973:	}
        -:  974:			
        -:  975:      //discard card from hand
        -:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:      return 0;
        -:  978:		*/
        -:  979:
        -:  980:		//refactored
        -:  981:    case village:
        2:  982:		villageEffect(currentPlayer, state, handPos);
call    0 returned 100%
        -:  983:		/*
        -:  984:      //+1 Card
        -:  985:      drawCard(currentPlayer, state);
        -:  986:			
        -:  987:      //+2 Actions
        -:  988:      state->numActions = state->numActions + 2;
        -:  989:			
        -:  990:      //discard played card from hand
        -:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:      return 0;
        -:  993:		*/
        -:  994:
        -:  995:    case baron:
        2:  996:      state->numBuys++;//Increase buys by 1!
        2:  997:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  998:	int p = 0;//Iterator for hand!
    #####:  999:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1000:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1001:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1002:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1003:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1004:	    state->discardCount[currentPlayer]++;
    #####: 1005:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1006:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1007:	    }
    #####: 1008:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1009:	    state->handCount[currentPlayer]--;
    #####: 1010:	    card_not_discarded = 0;//Exit the loop
        -: 1011:	  }
    #####: 1012:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1013:	    if(DEBUG) {
        -: 1014:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1015:	      printf("Must gain an estate if there are any\n");
        -: 1016:	    }
    #####: 1017:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1018:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1019:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1020:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1021:		isGameOver(state);
call    0 never executed
        -: 1022:	      }
        -: 1023:	    }
    #####: 1024:	    card_not_discarded = 0;//Exit the loop
        -: 1025:	  }
        -: 1026:			    
        -: 1027:	  else{
    #####: 1028:	    p++;//Next card
        -: 1029:	  }
        -: 1030:	}
        -: 1031:      }
        -: 1032:			    
        -: 1033:      else{
        2: 1034:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2: 1035:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        2: 1036:	  state->supplyCount[estate]--;//Decrement Estates
        2: 1037:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1038:	    isGameOver(state);
call    0 never executed
        -: 1039:	  }
        -: 1040:	}
        -: 1041:      }
        -: 1042:	    
        -: 1043:      
        2: 1044:      return 0;
        -: 1045:		
        -: 1046:	  //refactored
        -: 1047:    case great_hall:
    #####: 1048:		greatHallEffect(currentPlayer, state, handPos);
call    0 never executed
        -: 1049:		/*
        -: 1050:      //+1 Card
        -: 1051:      drawCard(currentPlayer, state);
        -: 1052:			
        -: 1053:      //+1 Actions
        -: 1054:      state->numActions++;
        -: 1055:			
        -: 1056:      //discard card from hand
        -: 1057:      discardCard(handPos, currentPlayer, state, 0);
        -: 1058:      return 0;
        -: 1059:	  */
        -: 1060:		
        -: 1061:    case minion:
        -: 1062:      //+1 action
    #####: 1063:      state->numActions++;
        -: 1064:			
        -: 1065:      //discard card from hand
    #####: 1066:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1067:			
    #####: 1068:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  state->coins = state->coins + 2;
        -: 1071:	}
        -: 1072:			
    #####: 1073:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1074:	{
        -: 1075:	  //discard hand
    #####: 1076:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1077:	    {
    #####: 1078:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1079:	    }
        -: 1080:				
        -: 1081:	  //draw 4
    #####: 1082:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1083:	    {
    #####: 1084:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1085:	    }
        -: 1086:				
        -: 1087:	  //other players discard hand and redraw if hand size > 4
    #####: 1088:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1089:	    {
    #####: 1090:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1091:		{
    #####: 1092:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1093:		    {
        -: 1094:		      //discard hand
    #####: 1095:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1096:			{
    #####: 1097:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1098:			}
        -: 1099:							
        -: 1100:		      //draw 4
    #####: 1101:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1102:			{
    #####: 1103:			  drawCard(i, state);
call    0 never executed
        -: 1104:			}
        -: 1105:		    }
        -: 1106:		}
        -: 1107:	    }
        -: 1108:				
        -: 1109:	}
    #####: 1110:      return 0;
        -: 1111:		
        -: 1112:    case steward:
    #####: 1113:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
        -: 1115:	  //+2 cards
    #####: 1116:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1117:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1118:	}
    #####: 1119:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
        -: 1121:	  //+2 coins
    #####: 1122:	  state->coins = state->coins + 2;
        -: 1123:	}
        -: 1124:      else
        -: 1125:	{
        -: 1126:	  //trash 2 cards in hand
    #####: 1127:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1129:	}
        -: 1130:			
        -: 1131:      //discard card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1133:      return 0;
        -: 1134:		
        -: 1135:    case tribute:
    #####: 1136:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1137:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1138:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1139:	  state->deckCount[nextPlayer]--;
        -: 1140:	}
    #####: 1141:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1142:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1143:	  state->discardCount[nextPlayer]--;
        -: 1144:	}
        -: 1145:	else{
        -: 1146:	  //No Card to Reveal
        -: 1147:	  if (DEBUG){
        -: 1148:	    printf("No cards to reveal\n");
        -: 1149:	  }
        -: 1150:	}
        -: 1151:      }
        -: 1152:	    
        -: 1153:      else{
    #####: 1154:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1155:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1156:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1157:	    state->deckCount[nextPlayer]++;
    #####: 1158:	    state->discard[nextPlayer][i] = -1;
    #####: 1159:	    state->discardCount[nextPlayer]--;
        -: 1160:	  }
        -: 1161:			    
    #####: 1162:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1163:	} 
    #####: 1164:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1165:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1166:	state->deckCount[nextPlayer]--;
    #####: 1167:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1168:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1169:	state->deckCount[nextPlayer]--;
        -: 1170:      }    
        -: 1171:		       
    #####: 1172:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1173:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1174:	state->playedCardCount++;
    #####: 1175:	tributeRevealedCards[1] = -1;
        -: 1176:      }
        -: 1177:
    #####: 1178:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1179:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1180:	  state->coins += 2;
        -: 1181:	}
        -: 1182:		    
    #####: 1183:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1184:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1185:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1186:	}
        -: 1187:	else{//Action Card
    #####: 1188:	  state->numActions = state->numActions + 2;
        -: 1189:	}
        -: 1190:      }
        -: 1191:	    
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case ambassador:
    #####: 1195:      j = 0;		//used to check if player has enough cards to discard
        -: 1196:
    #####: 1197:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:	{
    #####: 1199:	  return -1;				
        -: 1200:	}
        -: 1201:
    #####: 1202:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1203:	{
    #####: 1204:	  return -1;
        -: 1205:	}
        -: 1206:
    #####: 1207:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
    #####: 1209:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1210:	    {
    #####: 1211:	      j++;
        -: 1212:	    }
        -: 1213:	}
    #####: 1214:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
    #####: 1216:	  return -1;				
        -: 1217:	}
        -: 1218:
        -: 1219:      if (DEBUG) 
        -: 1220:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1221:
        -: 1222:      //increase supply count for choosen card by amount being discarded
    #####: 1223:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1224:			
        -: 1225:      //each other player gains a copy of revealed card
    #####: 1226:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1229:	    {
    #####: 1230:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1231:	    }
        -: 1232:	}
        -: 1233:
        -: 1234:      //discard played card from hand
    #####: 1235:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1236:
        -: 1237:      //trash copies of cards returned to supply
    #####: 1238:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1243:		{
    #####: 1244:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1245:		  break;
        -: 1246:		}
        -: 1247:	    }
        -: 1248:	}			
        -: 1249:
    #####: 1250:      return 0;
        -: 1251:		
        -: 1252:    case cutpurse:
        -: 1253:
    #####: 1254:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1255:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:	{
    #####: 1257:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1258:	    {
    #####: 1259:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1260:		{
    #####: 1261:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1262:		    {
    #####: 1263:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1264:		      break;
        -: 1265:		    }
    #####: 1266:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1267:		    {
    #####: 1268:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1269:			{
        -: 1270:			  if (DEBUG)
        -: 1271:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1272:			}	
    #####: 1273:		      break;
        -: 1274:		    }		
        -: 1275:		}
        -: 1276:					
        -: 1277:	    }
        -: 1278:				
        -: 1279:	}				
        -: 1280:
        -: 1281:      //discard played card from hand
    #####: 1282:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1283:
    #####: 1284:      return 0;
        -: 1285:
        -: 1286:		
        -: 1287:    case embargo: 
        -: 1288:      //+2 Coins
    #####: 1289:      state->coins = state->coins + 2;
        -: 1290:			
        -: 1291:      //see if selected pile is in play
    #####: 1292:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1293:	{
    #####: 1294:	  return -1;
        -: 1295:	}
        -: 1296:			
        -: 1297:      //add embargo token to selected supply pile
    #####: 1298:      state->embargoTokens[choice1]++;
        -: 1299:			
        -: 1300:      //trash card
    #####: 1301:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1302:      return 0;
        -: 1303:		
        -: 1304:    case outpost:
        -: 1305:      //set outpost flag
    #####: 1306:      state->outpostPlayed++;
        -: 1307:			
        -: 1308:      //discard card
    #####: 1309:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1310:      return 0;
        -: 1311:	  
        -: 1312:		
        -: 1313:    case salvager:
        -: 1314:      //+1 buy
    #####: 1315:      state->numBuys++;
        -: 1316:			
    #####: 1317:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1318:	{
        -: 1319:	  //gain coins equal to trashed card
    #####: 1320:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1321:	  //trash card
    #####: 1322:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1323:	}
        -: 1324:			
        -: 1325:      //discard card
    #####: 1326:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1327:      return 0;
        -: 1328:		
        -: 1329:    case sea_hag:
    #####: 1330:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1331:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1332:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1333:	  state->discardCount[i]++;
    #####: 1334:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1335:	}
        -: 1336:      }
    #####: 1337:      return 0;
        -: 1338:		
        -: 1339:    case treasure_map:
        -: 1340:      //search hand for another treasure_map
    #####: 1341:      index = -1;
    #####: 1342:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1345:	    {
    #####: 1346:	      index = i;
    #####: 1347:	      break;
        -: 1348:	    }
        -: 1349:	}
    #####: 1350:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1351:	{
        -: 1352:	  //trash both treasure cards
    #####: 1353:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1354:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1355:
        -: 1356:	  //gain 4 Gold cards
    #####: 1357:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1358:	    {
    #####: 1359:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1360:	    }
        -: 1361:				
        -: 1362:	  //return success
    #####: 1363:	  return 1;
        -: 1364:	}
        -: 1365:			
        -: 1366:      //no second treasure_map found in hand
    #####: 1367:      return -1;
        -: 1368:    }
        -: 1369:	
    #####: 1370:  return -1;
        -: 1371:}
        -: 1372:
function discardCard called 6 returned 100% blocks executed 78%
        6: 1373:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1374:{
        -: 1375:	
        -: 1376:  //if card is not trashed, added to Played pile 
        6: 1377:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1378:    {
        -: 1379:      //add card to played pile
        4: 1380:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1381:      state->playedCardCount++;
        -: 1382:    }
        -: 1383:	
        -: 1384:  //set played card to -1
        6: 1385:  state->hand[currentPlayer][handPos] = -1;
        -: 1386:	
        -: 1387:  //remove card from player's hand
        6: 1388:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1389:    {
        -: 1390:      //reduce number of cards in hand
    #####: 1391:      state->handCount[currentPlayer]--;
        -: 1392:    }
        6: 1393:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1394:    {
        -: 1395:      //reduce number of cards in hand
    #####: 1396:      state->handCount[currentPlayer]--;
        -: 1397:    }
        -: 1398:  else 	
        -: 1399:    {
        -: 1400:      //replace discarded card with last card in hand
        6: 1401:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1402:      //set last card to -1
        6: 1403:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1404:      //reduce number of cards in hand
        6: 1405:      state->handCount[currentPlayer]--;
        -: 1406:    }
        -: 1407:	
        6: 1408:  return 0;
        -: 1409:}
        -: 1410:
function gainCard called 14 returned 100% blocks executed 100%
       14: 1411:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1412:{
        -: 1413:  //Note: supplyPos is enum of choosen card
        -: 1414:	
        -: 1415:  //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1416:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 7% (fallthrough)
branch  2 taken 93%
        -: 1417:    {
        1: 1418:      return -1;
        -: 1419:    }
        -: 1420:	
        -: 1421:  //added card for [whoseTurn] current player:
        -: 1422:  // toFlag = 0 : add to discard
        -: 1423:  // toFlag = 1 : add to deck
        -: 1424:  // toFlag = 2 : add to hand
        -: 1425:
       13: 1426:  if (toFlag == 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
        -: 1427:    {
        3: 1428:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1429:      state->deckCount[player]++;
        -: 1430:    }
       10: 1431:  else if (toFlag == 2)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1432:    {
        2: 1433:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1434:      state->handCount[player]++;
        -: 1435:    }
        -: 1436:  else
        -: 1437:    {
        8: 1438:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1439:      state->discardCount[player]++;
        -: 1440:    }
        -: 1441:	
        -: 1442:  //decrease number in supply pile
       13: 1443:  state->supplyCount[supplyPos]--;
        -: 1444:	 
       13: 1445:  return 0;
        -: 1446:}
        -: 1447:
function updateCoins called 11 returned 100% blocks executed 82%
       11: 1448:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1449:{
        -: 1450:  int i;
        -: 1451:	
        -: 1452:  //reset coin count
       11: 1453:  state->coins = 0;
        -: 1454:
        -: 1455:  //add coins for each Treasure card in player's hand
       78: 1456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 1457:    {
       67: 1458:      if (state->hand[player][i] == copper)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1459:	{
       32: 1460:	  state->coins += 1;
        -: 1461:	}
       35: 1462:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1463:	{
    #####: 1464:	  state->coins += 2;
        -: 1465:	}
       35: 1466:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1467:	{
    #####: 1468:	  state->coins += 3;
        -: 1469:	}	
        -: 1470:    }	
        -: 1471:
        -: 1472:  //add bonus
       11: 1473:  state->coins += bonus;
        -: 1474:
       11: 1475:  return 0;
        -: 1476:}
        -: 1477:
        -: 1478:
        -: 1479://end of dominion.c
        -: 1480:
